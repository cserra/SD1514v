//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Silverlight", ConfigurationName="ServiceReference.IServiceClient", CallbackContract=typeof(Client.ServiceReference.IServiceClientCallback))]
    public interface IServiceClient {
        
        [System.ServiceModel.OperationContractAttribute(Action="Silverlight/IServiceClient/RegisterPlayer", ReplyAction="Silverlight/IServiceClient/RegisterPlayerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Service.Service.RegisterException), Action="Silverlight/IServiceClient/RegisterPlayerRegisterExceptionFault", Name="RegisterException", Namespace="http://schemas.datacontract.org/2004/07/Service.Service")]
        void RegisterPlayer(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="Silverlight/IServiceClient/RegisterPlayer", ReplyAction="Silverlight/IServiceClient/RegisterPlayerResponse")]
        System.Threading.Tasks.Task RegisterPlayerAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="Silverlight/IServiceClient/RemovePlayer", ReplyAction="Silverlight/IServiceClient/RemovePlayerResponse")]
        void RemovePlayer(string playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="Silverlight/IServiceClient/RemovePlayer", ReplyAction="Silverlight/IServiceClient/RemovePlayerResponse")]
        System.Threading.Tasks.Task RemovePlayerAsync(string playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="Silverlight/IServiceClient/Play", ReplyAction="Silverlight/IServiceClient/PlayResponse")]
        void Play(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="Silverlight/IServiceClient/Play", ReplyAction="Silverlight/IServiceClient/PlayResponse")]
        System.Threading.Tasks.Task PlayAsync(int x, int y);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceClientCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IServiceClient/SetPublicity")]
        void SetPublicity(string p);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IServiceClient/SetNotification")]
        void SetNotification(string p);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IServiceClient/SetPlayerData")]
        void SetPlayerData(string p);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceClientChannel : Client.ServiceReference.IServiceClient, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClientClient : System.ServiceModel.DuplexClientBase<Client.ServiceReference.IServiceClient>, Client.ServiceReference.IServiceClient {
        
        public ServiceClientClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClientClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClientClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClientClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClientClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterPlayer(string name) {
            base.Channel.RegisterPlayer(name);
        }
        
        public System.Threading.Tasks.Task RegisterPlayerAsync(string name) {
            return base.Channel.RegisterPlayerAsync(name);
        }
        
        public void RemovePlayer(string playerId) {
            base.Channel.RemovePlayer(playerId);
        }
        
        public System.Threading.Tasks.Task RemovePlayerAsync(string playerId) {
            return base.Channel.RemovePlayerAsync(playerId);
        }
        
        public void Play(int x, int y) {
            base.Channel.Play(x, y);
        }
        
        public System.Threading.Tasks.Task PlayAsync(int x, int y) {
            return base.Channel.PlayAsync(x, y);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IServiceManager")]
    public interface IServiceManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceManager/CreateBoard", ReplyAction="http://tempuri.org/IServiceManager/CreateBoardResponse")]
        void CreateBoard(int size);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceManager/CreateBoard", ReplyAction="http://tempuri.org/IServiceManager/CreateBoardResponse")]
        System.Threading.Tasks.Task CreateBoardAsync(int size);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceManagerChannel : Client.ServiceReference.IServiceManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceManagerClient : System.ServiceModel.ClientBase<Client.ServiceReference.IServiceManager>, Client.ServiceReference.IServiceManager {
        
        public ServiceManagerClient() {
        }
        
        public ServiceManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CreateBoard(int size) {
            base.Channel.CreateBoard(size);
        }
        
        public System.Threading.Tasks.Task CreateBoardAsync(int size) {
            return base.Channel.CreateBoardAsync(size);
        }
    }
}
