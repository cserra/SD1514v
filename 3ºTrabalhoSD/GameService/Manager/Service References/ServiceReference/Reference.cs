//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Manager.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegisterException", Namespace="http://schemas.datacontract.org/2004/07/Service.Service")]
    [System.SerializableAttribute()]
    public partial class RegisterException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Silverlight", ConfigurationName="ServiceReference.IServiceClient", CallbackContract=typeof(Manager.ServiceReference.IServiceClientCallback))]
    public interface IServiceClient {
        
        [System.ServiceModel.OperationContractAttribute(Action="Silverlight/IServiceClient/RegisterPlayer", ReplyAction="Silverlight/IServiceClient/RegisterPlayerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Manager.ServiceReference.RegisterException), Action="Silverlight/IServiceClient/RegisterPlayerRegisterExceptionFault", Name="RegisterException", Namespace="http://schemas.datacontract.org/2004/07/Service.Service")]
        void RegisterPlayer(string name, string lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="Silverlight/IServiceClient/RegisterPlayer", ReplyAction="Silverlight/IServiceClient/RegisterPlayerResponse")]
        System.Threading.Tasks.Task RegisterPlayerAsync(string name, string lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="Silverlight/IServiceClient/RemovePlayer", ReplyAction="Silverlight/IServiceClient/RemovePlayerResponse")]
        void RemovePlayer();
        
        [System.ServiceModel.OperationContractAttribute(Action="Silverlight/IServiceClient/RemovePlayer", ReplyAction="Silverlight/IServiceClient/RemovePlayerResponse")]
        System.Threading.Tasks.Task RemovePlayerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Silverlight/IServiceClient/Play", ReplyAction="Silverlight/IServiceClient/PlayResponse")]
        void Play(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="Silverlight/IServiceClient/Play", ReplyAction="Silverlight/IServiceClient/PlayResponse")]
        System.Threading.Tasks.Task PlayAsync(int x, int y);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceClientCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IServiceClient/SetPublicity")]
        void SetPublicity(string p);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IServiceClient/SetNotification")]
        void SetNotification(string p);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IServiceClient/SetPlayerData")]
        void SetPlayerData(string p);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceClientChannel : Manager.ServiceReference.IServiceClient, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClientClient : System.ServiceModel.DuplexClientBase<Manager.ServiceReference.IServiceClient>, Manager.ServiceReference.IServiceClient {
        
        public ServiceClientClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClientClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClientClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClientClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClientClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterPlayer(string name, string lang) {
            base.Channel.RegisterPlayer(name, lang);
        }
        
        public System.Threading.Tasks.Task RegisterPlayerAsync(string name, string lang) {
            return base.Channel.RegisterPlayerAsync(name, lang);
        }
        
        public void RemovePlayer() {
            base.Channel.RemovePlayer();
        }
        
        public System.Threading.Tasks.Task RemovePlayerAsync() {
            return base.Channel.RemovePlayerAsync();
        }
        
        public void Play(int x, int y) {
            base.Channel.Play(x, y);
        }
        
        public System.Threading.Tasks.Task PlayAsync(int x, int y) {
            return base.Channel.PlayAsync(x, y);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IServiceManager")]
    public interface IServiceManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceManager/CreateBoard", ReplyAction="http://tempuri.org/IServiceManager/CreateBoardResponse")]
        void CreateBoard(int size);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceManager/CreateBoard", ReplyAction="http://tempuri.org/IServiceManager/CreateBoardResponse")]
        System.Threading.Tasks.Task CreateBoardAsync(int size);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceManager/SendData", ReplyAction="http://tempuri.org/IServiceManager/SendDataResponse")]
        void SendData(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceManager/SendData", ReplyAction="http://tempuri.org/IServiceManager/SendDataResponse")]
        System.Threading.Tasks.Task SendDataAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceManager/SuspendGame", ReplyAction="http://tempuri.org/IServiceManager/SuspendGameResponse")]
        void SuspendGame(bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceManager/SuspendGame", ReplyAction="http://tempuri.org/IServiceManager/SuspendGameResponse")]
        System.Threading.Tasks.Task SuspendGameAsync(bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceManager/EndGame", ReplyAction="http://tempuri.org/IServiceManager/EndGameResponse")]
        void EndGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceManager/EndGame", ReplyAction="http://tempuri.org/IServiceManager/EndGameResponse")]
        System.Threading.Tasks.Task EndGameAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceManagerChannel : Manager.ServiceReference.IServiceManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceManagerClient : System.ServiceModel.ClientBase<Manager.ServiceReference.IServiceManager>, Manager.ServiceReference.IServiceManager {
        
        public ServiceManagerClient() {
        }
        
        public ServiceManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CreateBoard(int size) {
            base.Channel.CreateBoard(size);
        }
        
        public System.Threading.Tasks.Task CreateBoardAsync(int size) {
            return base.Channel.CreateBoardAsync(size);
        }
        
        public void SendData(string value) {
            base.Channel.SendData(value);
        }
        
        public System.Threading.Tasks.Task SendDataAsync(string value) {
            return base.Channel.SendDataAsync(value);
        }
        
        public void SuspendGame(bool value) {
            base.Channel.SuspendGame(value);
        }
        
        public System.Threading.Tasks.Task SuspendGameAsync(bool value) {
            return base.Channel.SuspendGameAsync(value);
        }
        
        public void EndGame() {
            base.Channel.EndGame();
        }
        
        public System.Threading.Tasks.Task EndGameAsync() {
            return base.Channel.EndGameAsync();
        }
    }
}
